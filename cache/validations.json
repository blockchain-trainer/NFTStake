{
  "version": "3.2",
  "log": [
    {
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:19",
        "version": {
          "withMetadata": "a7b0b0767839ee43d61f371b69fd32f0554946cde8e56732cc06e802ed565a43",
          "withoutMetadata": "4f413f3b6cdf88c2c592bce83559158b0cf97c0138b4dab3072768366ab7d500",
          "linkedWithoutMetadata": "4f413f3b6cdf88c2c592bce83559158b0cf97c0138b4dab3072768366ab7d500"
        },
        "inherit": [
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(string)",
          "supportsInterface(bytes4)",
          "uri(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155",
            "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "_balances",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:23"
            },
            {
              "contract": "ERC1155",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:26"
            },
            {
              "contract": "ERC1155",
              "label": "_uri",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Burnable": {
        "src": "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:13",
        "inherit": [
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(address,uint256,uint256)",
          "burnBatch(address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155MetadataURI": {
        "src": "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:13",
        "inherit": [
          "IERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "5f7590a60fa78d81b9438c50932efcbb2e39789846803e312cbf7f39a52d3d40",
          "withoutMetadata": "411ae407679b3f91ede3e6daa092b23000f03b2f4c713fdaaf1bb950c8cff805",
          "linkedWithoutMetadata": "411ae407679b3f91ede3e6daa092b23000f03b2f4c713fdaaf1bb950c8cff805"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "784e9715283b21891d69f181166eaac2a271d90ca054a09b4c2119ca60291758",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SoulLabFT": {
        "src": "contracts/tokens/SoulLabFT.sol:7",
        "version": {
          "withMetadata": "9bf9dc8de89d9fbed11d369ec3c1216222355678fbb19cab0f61ebdc340ae79a",
          "withoutMetadata": "939b599864d5b2f3367a0c0b72328fd4220f0f89e47ae6d5fc81b13218efe745",
          "linkedWithoutMetadata": "939b599864d5b2f3367a0c0b72328fd4220f0f89e47ae6d5fc81b13218efe745"
        },
        "inherit": [
          "Ownable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SoulLabFT",
            "src": "contracts/tokens/SoulLabFT.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SoulLabNFT": {
        "src": "contracts/tokens/SoulLabNFT.sol:8",
        "version": {
          "withMetadata": "85ba9fcd566eb50dd7119981a3880a0395fda8de4ec0edaf73888e21e7a793b7",
          "withoutMetadata": "f41957c2969477dc5f492e8472dad2766e9ee4bae1c5e9174da4efb96cdec811",
          "linkedWithoutMetadata": "f41957c2969477dc5f492e8472dad2766e9ee4bae1c5e9174da4efb96cdec811"
        },
        "inherit": [
          "ERC1155Burnable",
          "Ownable",
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setURI(string)",
          "mint(address,uint256,uint256,bytes)",
          "mintBatch(address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SoulLabNFT",
            "src": "contracts/tokens/SoulLabNFT.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "acd48054d7165ba2439192724596ae7b4367867535f6c0805e7c4f4a9caca6b3",
          "withoutMetadata": "098456f632693676012ef2b98d5d5bab01f2002ab120eca75ed5738484b6b9ca",
          "linkedWithoutMetadata": "098456f632693676012ef2b98d5d5bab01f2002ab120eca75ed5738484b6b9ca"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "5f7590a60fa78d81b9438c50932efcbb2e39789846803e312cbf7f39a52d3d40",
          "withoutMetadata": "411ae407679b3f91ede3e6daa092b23000f03b2f4c713fdaaf1bb950c8cff805",
          "linkedWithoutMetadata": "411ae407679b3f91ede3e6daa092b23000f03b2f4c713fdaaf1bb950c8cff805"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SoulLabFT": {
        "src": "contracts/tokens/SoulLabFT.sol:9",
        "version": {
          "withMetadata": "a9be894ddb549716b321e52eaf2cab0e635b4d482a5dcd75880bcfa0884bbd22",
          "withoutMetadata": "dcdd27bb313abc09c665790a45c4bd080de5e4a1987b7440f7ebedd3aa74c8ac",
          "linkedWithoutMetadata": "dcdd27bb313abc09c665790a45c4bd080de5e4a1987b7440f7ebedd3aa74c8ac"
        },
        "inherit": [
          "OwnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:19",
        "version": {
          "withMetadata": "a7b0b0767839ee43d61f371b69fd32f0554946cde8e56732cc06e802ed565a43",
          "withoutMetadata": "4f413f3b6cdf88c2c592bce83559158b0cf97c0138b4dab3072768366ab7d500",
          "linkedWithoutMetadata": "4f413f3b6cdf88c2c592bce83559158b0cf97c0138b4dab3072768366ab7d500"
        },
        "inherit": [
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(string)",
          "supportsInterface(bytes4)",
          "uri(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155",
            "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "_balances",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:23"
            },
            {
              "contract": "ERC1155",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:26"
            },
            {
              "contract": "ERC1155",
              "label": "_uri",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Burnable": {
        "src": "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:13",
        "inherit": [
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(address,uint256,uint256)",
          "burnBatch(address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155MetadataURI": {
        "src": "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:13",
        "inherit": [
          "IERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Holder": {
        "src": "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:10",
        "version": {
          "withMetadata": "01064b2c23a2003d85d46472dc9f53af9af51a10ce2b811ed8e3f7c640d9eb0c",
          "withoutMetadata": "8a060810352d7b1e3971d31eab0754e494d855b5e9ca5513c136a61e253f0158",
          "linkedWithoutMetadata": "8a060810352d7b1e3971d31eab0754e494d855b5e9ca5513c136a61e253f0158"
        },
        "inherit": [
          "ERC1155Receiver",
          "IERC1155Receiver",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:11",
        "inherit": [
          "IERC1155Receiver",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "784e9715283b21891d69f181166eaac2a271d90ca054a09b4c2119ca60291758",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/staking/SoulLabStake.sol:23",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SoulLabStake": {
        "src": "contracts/staking/SoulLabStake.sol:42",
        "version": {
          "withMetadata": "5497327e41ed68905a3931ce0e9c1c25c3a7e79dc55c3897f50cc298d17490b5",
          "withoutMetadata": "d7f7115e7d78ca60dba9f28b3083b312fe3fe14c16903ec78855c540b42af563",
          "linkedWithoutMetadata": "d7f7115e7d78ca60dba9f28b3083b312fe3fe14c16903ec78855c540b42af563"
        },
        "inherit": [
          "ERC1155Holder",
          "ERC1155Receiver",
          "IERC1155Receiver",
          "ERC165",
          "IERC165",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)",
          "claim()",
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "SOUL_LAB_TOKEN",
            "src": "contracts/staking/SoulLabStake.sol:52"
          },
          {
            "kind": "state-variable-assignment",
            "name": "soulLabFT",
            "src": "contracts/staking/SoulLabStake.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "SoulLabStake",
              "label": "SOUL_LAB_TOKEN",
              "type": "t_address",
              "src": "contracts/staking/SoulLabStake.sol:52"
            },
            {
              "contract": "SoulLabStake",
              "label": "soulLabFT",
              "type": "t_contract(AToken)2252",
              "src": "contracts/staking/SoulLabStake.sol:53"
            },
            {
              "contract": "SoulLabStake",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)2286_storage)",
              "src": "contracts/staking/SoulLabStake.sol:59"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_contract(AToken)2252": {
              "label": "contract AToken"
            },
            "t_mapping(t_address,t_struct(Stake)2286_storage)": {
              "label": "mapping(address => struct SoulLabStake.Stake)"
            },
            "t_struct(Stake)2286_storage": {
              "label": "struct SoulLabStake.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "stakeStart",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "SoulLabNFT": {
        "src": "contracts/tokens/SoulLabNFT.sol:8",
        "version": {
          "withMetadata": "e3e86258d04c0c033c9530b0c5226d180a885b897c45730ece49021c0012ee21",
          "withoutMetadata": "cc6c727ea900d349e50adf1c12aa2a07f37a3c2752854bc691c70428e7fb53a5",
          "linkedWithoutMetadata": "cc6c727ea900d349e50adf1c12aa2a07f37a3c2752854bc691c70428e7fb53a5"
        },
        "inherit": [
          "ERC1155Burnable",
          "Ownable",
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setURI(string)",
          "mint(address,uint256,uint256,bytes)",
          "mintBatch(address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SoulLabNFT",
            "src": "contracts/tokens/SoulLabNFT.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Ownable": {
        "src": "@openzeppelin/contracts/access/Ownable.sol:19",
        "inherit": [
          "Context"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "Ownable",
            "src": "@openzeppelin/contracts/access/Ownable.sol:27"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "Ownable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts/access/Ownable.sol:20"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:19",
        "version": {
          "withMetadata": "a7b0b0767839ee43d61f371b69fd32f0554946cde8e56732cc06e802ed565a43",
          "withoutMetadata": "4f413f3b6cdf88c2c592bce83559158b0cf97c0138b4dab3072768366ab7d500",
          "linkedWithoutMetadata": "4f413f3b6cdf88c2c592bce83559158b0cf97c0138b4dab3072768366ab7d500"
        },
        "inherit": [
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [
          "Address"
        ],
        "methods": [
          "(string)",
          "supportsInterface(bytes4)",
          "uri(uint256)",
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC1155",
            "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:34"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC1155",
              "label": "_balances",
              "type": "t_mapping(t_uint256,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:23"
            },
            {
              "contract": "ERC1155",
              "label": "_operatorApprovals",
              "type": "t_mapping(t_address,t_mapping(t_address,t_bool))",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:26"
            },
            {
              "contract": "ERC1155",
              "label": "_uri",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC1155/ERC1155.sol:29"
            }
          ],
          "types": {
            "t_mapping(t_uint256,t_mapping(t_address,t_uint256))": {
              "label": "mapping(uint256 => mapping(address => uint256))"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_mapping(t_address,t_bool))": {
              "label": "mapping(address => mapping(address => bool))"
            },
            "t_mapping(t_address,t_bool)": {
              "label": "mapping(address => bool)"
            },
            "t_bool": {
              "label": "bool"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC1155": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155.sol:13",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "balanceOf(address,uint256)",
          "balanceOfBatch(address[],uint256[])",
          "setApprovalForAll(address,bool)",
          "isApprovedForAll(address,address)",
          "safeTransferFrom(address,address,uint256,uint256,bytes)",
          "safeBatchTransferFrom(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol:10",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Burnable": {
        "src": "@openzeppelin/contracts/token/ERC1155/extensions/ERC1155Burnable.sol:13",
        "inherit": [
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(address,uint256,uint256)",
          "burnBatch(address,uint256[],uint256[])"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC1155MetadataURI": {
        "src": "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol:13",
        "inherit": [
          "IERC1155",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "uri(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Holder": {
        "src": "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Holder.sol:10",
        "version": {
          "withMetadata": "01064b2c23a2003d85d46472dc9f53af9af51a10ce2b811ed8e3f7c640d9eb0c",
          "withoutMetadata": "8a060810352d7b1e3971d31eab0754e494d855b5e9ca5513c136a61e253f0158",
          "linkedWithoutMetadata": "8a060810352d7b1e3971d31eab0754e494d855b5e9ca5513c136a61e253f0158"
        },
        "inherit": [
          "ERC1155Receiver",
          "IERC1155Receiver",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "onERC1155Received(address,address,uint256,uint256,bytes)",
          "onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC1155Receiver": {
        "src": "@openzeppelin/contracts/token/ERC1155/utils/ERC1155Receiver.sol:11",
        "inherit": [
          "IERC1155Receiver",
          "ERC165",
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:34",
        "version": {
          "withMetadata": "5f7590a60fa78d81b9438c50932efcbb2e39789846803e312cbf7f39a52d3d40",
          "withoutMetadata": "411ae407679b3f91ede3e6daa092b23000f03b2f4c713fdaaf1bb950c8cff805",
          "linkedWithoutMetadata": "411ae407679b3f91ede3e6daa092b23000f03b2f4c713fdaaf1bb950c8cff805"
        },
        "inherit": [
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "(string,string)",
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "ERC20",
            "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:53"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "ERC20",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:35"
            },
            {
              "contract": "ERC20",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:37"
            },
            {
              "contract": "ERC20",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:39"
            },
            {
              "contract": "ERC20",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:41"
            },
            {
              "contract": "ERC20",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts/token/ERC20/ERC20.sol:42"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20": {
        "src": "@openzeppelin/contracts/token/ERC20/IERC20.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20Burnable": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol:13",
        "inherit": [
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC20Metadata": {
        "src": "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol:12",
        "inherit": [
          "IERC20"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Address": {
        "src": "@openzeppelin/contracts/utils/Address.sol:8",
        "version": {
          "withMetadata": "784e9715283b21891d69f181166eaac2a271d90ca054a09b4c2119ca60291758",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [
          {
            "kind": "delegatecall",
            "src": "@openzeppelin/contracts/utils/Address.sol:185"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Context": {
        "src": "@openzeppelin/contracts/utils/Context.sol:15",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/ERC165.sol:21",
        "inherit": [
          "IERC165"
        ],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "IERC165": {
        "src": "@openzeppelin/contracts/utils/introspection/IERC165.sol:14",
        "inherit": [],
        "libraries": [],
        "methods": [
          "supportsInterface(bytes4)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SoulLabStake": {
        "src": "contracts/staking/SoulLabStake.sol:24",
        "version": {
          "withMetadata": "d4a1260c68116e140ac18e2d87127390ede3036247f545eba0418d2ae9dd153e",
          "withoutMetadata": "772d0a523dfc8ef2401bf5f757f7fa2cf70652a08f574daa5243f6b7f6b39c3b",
          "linkedWithoutMetadata": "772d0a523dfc8ef2401bf5f757f7fa2cf70652a08f574daa5243f6b7f6b39c3b"
        },
        "inherit": [
          "ERC1155Holder",
          "ERC1155Receiver",
          "IERC1155Receiver",
          "ERC165",
          "IERC165",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SoulLabFT": {
        "src": "contracts/tokens/SoulLabFT.sol:7",
        "version": {
          "withMetadata": "9bf9dc8de89d9fbed11d369ec3c1216222355678fbb19cab0f61ebdc340ae79a",
          "withoutMetadata": "939b599864d5b2f3367a0c0b72328fd4220f0f89e47ae6d5fc81b13218efe745",
          "linkedWithoutMetadata": "939b599864d5b2f3367a0c0b72328fd4220f0f89e47ae6d5fc81b13218efe745"
        },
        "inherit": [
          "Ownable",
          "ERC20Burnable",
          "ERC20",
          "IERC20Metadata",
          "IERC20",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SoulLabFT",
            "src": "contracts/tokens/SoulLabFT.sol:8"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SoulLabNFT": {
        "src": "contracts/tokens/SoulLabNFT.sol:8",
        "version": {
          "withMetadata": "85ba9fcd566eb50dd7119981a3880a0395fda8de4ec0edaf73888e21e7a793b7",
          "withoutMetadata": "f41957c2969477dc5f492e8472dad2766e9ee4bae1c5e9174da4efb96cdec811",
          "linkedWithoutMetadata": "f41957c2969477dc5f492e8472dad2766e9ee4bae1c5e9174da4efb96cdec811"
        },
        "inherit": [
          "ERC1155Burnable",
          "Ownable",
          "ERC1155",
          "IERC1155MetadataURI",
          "IERC1155",
          "ERC165",
          "IERC165",
          "Context"
        ],
        "libraries": [],
        "methods": [
          "()",
          "setURI(string)",
          "mint(address,uint256,uint256,bytes)",
          "mintBatch(address,uint256[],uint256[],bytes)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "SoulLabNFT",
            "src": "contracts/tokens/SoulLabNFT.sol:9"
          }
        ],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "acd48054d7165ba2439192724596ae7b4367867535f6c0805e7c4f4a9caca6b3",
          "withoutMetadata": "098456f632693676012ef2b98d5d5bab01f2002ab120eca75ed5738484b6b9ca",
          "linkedWithoutMetadata": "098456f632693676012ef2b98d5d5bab01f2002ab120eca75ed5738484b6b9ca"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:14",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20BurnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:50"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:39"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1044_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1044_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:262"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1044_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1044_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1044_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:22",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)1988_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:93"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)1988_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)1988_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:13",
        "version": {
          "withMetadata": "fc5fc0d1199195d99908678f20a85f8f8f7a93a0d362a1332e1a2bb271df606c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:11",
        "version": {
          "withMetadata": "288c381090a77ca097e87a92b77bb2e4e28b8bb9a51085eb885d35ea1879d8e5",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:27",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:29"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:111"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:8",
        "version": {
          "withMetadata": "c0047129606b0ed4dfa08ad2cd6452479678b98e4f16c94aad3cc22a5e54fc02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:20",
        "version": {
          "withMetadata": "b85ac48eb654324fbee132acf74e64adaad53f72c4f5bfd5622fe4f36625d171",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Itranche": {
        "src": "contracts/base/ITranche.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdraw(uint256)",
          "withdrawTo(address,uint256)",
          "rewards()",
          "locked()",
          "penalties()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaToken": {
        "src": "contracts/tokens/LodaToken.sol:12",
        "version": {
          "withMetadata": "f88289fef37812d2cb3ce0f4a94af12a881a69bd083e8716371a1878e2ef58ee",
          "withoutMetadata": "5bba1db13a595c62d54bab0c8694c458661498a74f48a7d6b743ddb29f67d056",
          "linkedWithoutMetadata": "5bba1db13a595c62d54bab0c8694c458661498a74f48a7d6b743ddb29f67d056"
        },
        "inherit": [
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ERC20BurnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "pause()",
          "unpause()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodeStar": {
        "src": "contracts/tokens/LodeStar.sol:12",
        "version": {
          "withMetadata": "1a44a2b75924f542768cdc6f32f5a42716ea56ae25d023429204d1820d1908da",
          "withoutMetadata": "7d184a2027f1c38a6f49429188606221fe8eeb20ab1ee28159803b23864b57a4",
          "linkedWithoutMetadata": "7d184a2027f1c38a6f49429188606221fe8eeb20ab1ee28159803b23864b57a4"
        },
        "inherit": [
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ERC20BurnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "pause()",
          "unpause()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:42",
        "version": {
          "withMetadata": "e5c578251d1e04851c452a021bf5545db8689ef6b0354445efca99ff604bb495",
          "withoutMetadata": "f732575af0ffbfd1dda3d7a70206af5ad0cfdeaba6af2194c4d4167035c7488d",
          "linkedWithoutMetadata": "f732575af0ffbfd1dda3d7a70206af5ad0cfdeaba6af2194c4d4167035c7488d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "()",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "withdrawInit()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:48"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:49"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:50"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:57"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:58"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)3529_storage)",
              "src": "contracts/tranches/LodaILT.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)3529_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)3529_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                },
                {
                  "label": "coolOffStarted",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:42",
        "version": {
          "withMetadata": "e5c578251d1e04851c452a021bf5545db8689ef6b0354445efca99ff604bb495",
          "withoutMetadata": "f732575af0ffbfd1dda3d7a70206af5ad0cfdeaba6af2194c4d4167035c7488d",
          "linkedWithoutMetadata": "f732575af0ffbfd1dda3d7a70206af5ad0cfdeaba6af2194c4d4167035c7488d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "()",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "withdrawInit()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:48"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:49"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:50"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:57"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:58"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)441_storage)",
              "src": "contracts/tranches/LodaILT.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)441_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)441_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                },
                {
                  "label": "coolOffStarted",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:42",
        "version": {
          "withMetadata": "c2081c2d98e6d2d8b53c642f14792e293b15bf8e030c335683cad26a9d21b8bf",
          "withoutMetadata": "299392c975ffe2c83726b93cef83a87d883f80ae2f26d95f3cf03379bdd27e3b",
          "linkedWithoutMetadata": "299392c975ffe2c83726b93cef83a87d883f80ae2f26d95f3cf03379bdd27e3b"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "()",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "withdrawInit()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:48"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:49"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:50"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:57"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:58"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)441_storage)",
              "src": "contracts/tranches/LodaILT.sol:69"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)441_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)441_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                },
                {
                  "label": "coolOffStarted",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:42",
        "version": {
          "withMetadata": "b0f290abbf54193db0434782a23e8800d8eb86469335846b1a5c38491ab9e47b",
          "withoutMetadata": "a1ab218eeba4e279e710b2ffba6bffd01470135e26284a9df42b782c178df62a",
          "linkedWithoutMetadata": "a1ab218eeba4e279e710b2ffba6bffd01470135e26284a9df42b782c178df62a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "withdrawInit()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:48"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:49"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:50"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:57"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:58"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)435_storage)",
              "src": "contracts/tranches/LodaILT.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)435_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)435_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                },
                {
                  "label": "coolOffStarted",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:42",
        "version": {
          "withMetadata": "b1f82a345b57ea8228d10ed007ac0d0a2e4a3f2524362a3b00ff935965439b7d",
          "withoutMetadata": "2a2f65c89d0b1c1f98df9fb92d27949698a143d490cfa53bdc41e677edbab161",
          "linkedWithoutMetadata": "2a2f65c89d0b1c1f98df9fb92d27949698a143d490cfa53bdc41e677edbab161"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "withdrawInit()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:48"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:49"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:50"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:57"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:58"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)435_storage)",
              "src": "contracts/tranches/LodaILT.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)435_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)435_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                },
                {
                  "label": "coolOffStarted",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:42",
        "version": {
          "withMetadata": "994464071ce49ea6deb2d984151c3d7dbedf72f6b43e62a29848ee40392a6e8b",
          "withoutMetadata": "a1ab218eeba4e279e710b2ffba6bffd01470135e26284a9df42b782c178df62a",
          "linkedWithoutMetadata": "a1ab218eeba4e279e710b2ffba6bffd01470135e26284a9df42b782c178df62a"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "withdrawInit()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:48"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:49"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:50"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:57"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:58"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)435_storage)",
              "src": "contracts/tranches/LodaILT.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)435_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)435_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                },
                {
                  "label": "coolOffStarted",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:42",
        "version": {
          "withMetadata": "6139e72cc59eafc18a14dbfd54f52a4468ec74c452cebf9d9e2e0a3db195a4c8",
          "withoutMetadata": "3d5195558b5b503bdcef940af234b9aed85b0f2f96673f58c2a288a5f78ccd65",
          "linkedWithoutMetadata": "3d5195558b5b503bdcef940af234b9aed85b0f2f96673f58c2a288a5f78ccd65"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "withdrawInit()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:48"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:49"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:50"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:57"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:58"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)435_storage)",
              "src": "contracts/tranches/LodaILT.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)435_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)435_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                },
                {
                  "label": "coolOffStarted",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:42",
        "version": {
          "withMetadata": "080074c990200bb3b4cdf3657ac84ddf2d095d110bb3abd02e49bbcbbf9016d1",
          "withoutMetadata": "2a2f65c89d0b1c1f98df9fb92d27949698a143d490cfa53bdc41e677edbab161",
          "linkedWithoutMetadata": "2a2f65c89d0b1c1f98df9fb92d27949698a143d490cfa53bdc41e677edbab161"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "withdrawInit()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:48"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:49"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:50"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:57"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:58"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)435_storage)",
              "src": "contracts/tranches/LodaILT.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)435_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)435_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                },
                {
                  "label": "coolOffStarted",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:42",
        "version": {
          "withMetadata": "7d61b52bc6e0c0fbfc3996c9f539df1ecec52ed789d4f47516eb25781820788e",
          "withoutMetadata": "eb58a721719c1ec3d2016602d6a5ae34795f0c802285f2c9a5bc88a178938d88",
          "linkedWithoutMetadata": "eb58a721719c1ec3d2016602d6a5ae34795f0c802285f2c9a5bc88a178938d88"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "withdrawInit()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:48"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:49"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:50"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:57"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:58"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)435_storage)",
              "src": "contracts/tranches/LodaILT.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)435_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)435_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                },
                {
                  "label": "coolOffStarted",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:42",
        "version": {
          "withMetadata": "64ef364262dec99c3f70d43355c9de7f2278d1e0711f9d1cacb376f0e7a25d83",
          "withoutMetadata": "eb58a721719c1ec3d2016602d6a5ae34795f0c802285f2c9a5bc88a178938d88",
          "linkedWithoutMetadata": "eb58a721719c1ec3d2016602d6a5ae34795f0c802285f2c9a5bc88a178938d88"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "withdrawInit()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:48"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:49"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:50"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:57"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:58"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)436_storage)",
              "src": "contracts/tranches/LodaILT.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)436_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)436_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                },
                {
                  "label": "coolOffStarted",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:42",
        "version": {
          "withMetadata": "c4e870e78f4bff83987133605d06109ae0cc60fcc6dc4904bc32f8520a9f4739",
          "withoutMetadata": "09df2894eab021af5b6e85164909821d2ed0d3a74ea102f652ffd4e4c9e35e2d",
          "linkedWithoutMetadata": "09df2894eab021af5b6e85164909821d2ed0d3a74ea102f652ffd4e4c9e35e2d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "withdrawInit()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:48"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:49"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:50"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:57"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:58"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)436_storage)",
              "src": "contracts/tranches/LodaILT.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)436_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)436_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                },
                {
                  "label": "coolOffStarted",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:42",
        "version": {
          "withMetadata": "b061995ba9f373aa94cfef3ce236dba503a1b3a68e259406034a71c0a2ca5146",
          "withoutMetadata": "ec87f8a67dbfb732c840db246839c8ec107e763ca32427aeca27fcfdfe8efb26",
          "linkedWithoutMetadata": "ec87f8a67dbfb732c840db246839c8ec107e763ca32427aeca27fcfdfe8efb26"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "withdrawInit()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:48"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:49"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:50"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:57"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:58"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)436_storage)",
              "src": "contracts/tranches/LodaILT.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)436_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)436_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                },
                {
                  "label": "coolOffStarted",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:42",
        "version": {
          "withMetadata": "3dc277c3457a6bb410146fb9f1abd8ca42ee8d5befb91c60948d630159a850f6",
          "withoutMetadata": "23f7d2b2482e1dbe23386cb4e024cf6c36b6e23335f870be3dd122f9149413c3",
          "linkedWithoutMetadata": "23f7d2b2482e1dbe23386cb4e024cf6c36b6e23335f870be3dd122f9149413c3"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "withdrawInit()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:48"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:49"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:50"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:57"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:58"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)436_storage)",
              "src": "contracts/tranches/LodaILT.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)436_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)436_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                },
                {
                  "label": "coolOffStarted",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:42",
        "version": {
          "withMetadata": "fe7bf96edd077767f88feae2590f46c473bab778304eee087aa77843a3750c63",
          "withoutMetadata": "7d975f9c1d70a557ef1196531cc59cdf6dc522e87571e85481bd7946d36bd3f2",
          "linkedWithoutMetadata": "7d975f9c1d70a557ef1196531cc59cdf6dc522e87571e85481bd7946d36bd3f2"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "withdrawInit()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:48"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:49"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:50"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:57"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:58"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)436_storage)",
              "src": "contracts/tranches/LodaILT.sol:68"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)436_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)436_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                },
                {
                  "label": "coolOffStarted",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "acd48054d7165ba2439192724596ae7b4367867535f6c0805e7c4f4a9caca6b3",
          "withoutMetadata": "098456f632693676012ef2b98d5d5bab01f2002ab120eca75ed5738484b6b9ca",
          "linkedWithoutMetadata": "098456f632693676012ef2b98d5d5bab01f2002ab120eca75ed5738484b6b9ca"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:14",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20BurnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:50"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:39"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1044_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1044_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:262"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1044_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1044_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1044_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:22",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)1988_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:93"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)1988_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)1988_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:13",
        "version": {
          "withMetadata": "fc5fc0d1199195d99908678f20a85f8f8f7a93a0d362a1332e1a2bb271df606c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:11",
        "version": {
          "withMetadata": "288c381090a77ca097e87a92b77bb2e4e28b8bb9a51085eb885d35ea1879d8e5",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:27",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:29"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:111"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:8",
        "version": {
          "withMetadata": "c0047129606b0ed4dfa08ad2cd6452479678b98e4f16c94aad3cc22a5e54fc02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:20",
        "version": {
          "withMetadata": "b85ac48eb654324fbee132acf74e64adaad53f72c4f5bfd5622fe4f36625d171",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Itranche": {
        "src": "contracts/base/ITranche.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdraw(uint256)",
          "withdrawTo(address,uint256)",
          "rewards()",
          "locked()",
          "penalties()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaToken": {
        "src": "contracts/tokens/LodaToken.sol:12",
        "version": {
          "withMetadata": "f88289fef37812d2cb3ce0f4a94af12a881a69bd083e8716371a1878e2ef58ee",
          "withoutMetadata": "5bba1db13a595c62d54bab0c8694c458661498a74f48a7d6b743ddb29f67d056",
          "linkedWithoutMetadata": "5bba1db13a595c62d54bab0c8694c458661498a74f48a7d6b743ddb29f67d056"
        },
        "inherit": [
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ERC20BurnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "pause()",
          "unpause()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodeStar": {
        "src": "contracts/tokens/LodeStar.sol:12",
        "version": {
          "withMetadata": "1a44a2b75924f542768cdc6f32f5a42716ea56ae25d023429204d1820d1908da",
          "withoutMetadata": "7d184a2027f1c38a6f49429188606221fe8eeb20ab1ee28159803b23864b57a4",
          "linkedWithoutMetadata": "7d184a2027f1c38a6f49429188606221fe8eeb20ab1ee28159803b23864b57a4"
        },
        "inherit": [
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ERC20BurnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "pause()",
          "unpause()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "5e044ca0bd88c3451e5ed16f35521dd519bbcdffb10a4be96fe6ef0a41f6a82a",
          "withoutMetadata": "2b8c403b034bf2a091ca8002d77d4ba2a958523f316db26df3e7ddf2fb3c8440",
          "linkedWithoutMetadata": "2b8c403b034bf2a091ca8002d77d4ba2a958523f316db26df3e7ddf2fb3c8440"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)3519_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)3519_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)3519_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "5e044ca0bd88c3451e5ed16f35521dd519bbcdffb10a4be96fe6ef0a41f6a82a",
          "withoutMetadata": "2b8c403b034bf2a091ca8002d77d4ba2a958523f316db26df3e7ddf2fb3c8440",
          "linkedWithoutMetadata": "2b8c403b034bf2a091ca8002d77d4ba2a958523f316db26df3e7ddf2fb3c8440"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "10efa21dcb5ba20ba50a1406de8eadaa4102ab97f2506602eae7d77a1a7bcc55",
          "withoutMetadata": "2b8c403b034bf2a091ca8002d77d4ba2a958523f316db26df3e7ddf2fb3c8440",
          "linkedWithoutMetadata": "2b8c403b034bf2a091ca8002d77d4ba2a958523f316db26df3e7ddf2fb3c8440"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "claimAccruedRewards()",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "f0db646771d085b7ad59c70972ad38b8d3e8353f7e02e756c8b3ca1543a7d800",
          "withoutMetadata": "2c7c1c69648a302454284cd0b1fc70876139cf4e977c61361dc198415490a2f9",
          "linkedWithoutMetadata": "2c7c1c69648a302454284cd0b1fc70876139cf4e977c61361dc198415490a2f9"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "d6b32c38d6c81bb6ad6fcd02233aa21a580113bb10acc1e5be68e5ccc9d57a8e",
          "withoutMetadata": "2c7c1c69648a302454284cd0b1fc70876139cf4e977c61361dc198415490a2f9",
          "linkedWithoutMetadata": "2c7c1c69648a302454284cd0b1fc70876139cf4e977c61361dc198415490a2f9"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "9b76451a57ee7d4f5d54e7c2301f6ce86bf2f35a190c756bcb74ec787e390263",
          "withoutMetadata": "df307b1e5c9ea37c33f4624f5a42c9cdf471ab1e788b8dd97fad4b28a1f89474",
          "linkedWithoutMetadata": "df307b1e5c9ea37c33f4624f5a42c9cdf471ab1e788b8dd97fad4b28a1f89474"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "7cde73679ea81d1334338655216930611a7190959f99c4546dbab250e12264c7",
          "withoutMetadata": "8195837e7eb0afe59c6192ea2245c74d9caace87edece50f022282d34a3f3899",
          "linkedWithoutMetadata": "8195837e7eb0afe59c6192ea2245c74d9caace87edece50f022282d34a3f3899"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)",
          "suffrage2(address)",
          "updateStakeTime_FOR_TEST_REMOVE(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "3b2801fcf6efd033ed29e4c6c836e0124744bd04a64eebbc727aef3403a51652",
          "withoutMetadata": "55aa641287b26caee65690696d224f97575ba3ac65d7252a4155358a976e582c",
          "linkedWithoutMetadata": "55aa641287b26caee65690696d224f97575ba3ac65d7252a4155358a976e582c"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)",
          "suffrage2(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "d54e4e754db76b36a846ea71f715407ef3331f31135c1dc2fa9a46c516ce8e4c",
          "withoutMetadata": "fba099e62f0ae78609eda0a26af5632ce8eb4ae184ac7bf1b635b4877cceec43",
          "linkedWithoutMetadata": "fba099e62f0ae78609eda0a26af5632ce8eb4ae184ac7bf1b635b4877cceec43"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)",
          "suffrage2(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "4c82c959ec23fbd369505179558d40cafe3f0b0eafb1265797529784b673ca5d",
          "withoutMetadata": "79443ae2f9ee3171e5c6999510961bbadc3ec29df96654bf1dc4c3289346945b",
          "linkedWithoutMetadata": "79443ae2f9ee3171e5c6999510961bbadc3ec29df96654bf1dc4c3289346945b"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)",
          "suffrage2(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "0bc5b4e735dcd170d6979590d52a3b55d80505f7151f57d28783dc78765d4028",
          "withoutMetadata": "79443ae2f9ee3171e5c6999510961bbadc3ec29df96654bf1dc4c3289346945b",
          "linkedWithoutMetadata": "79443ae2f9ee3171e5c6999510961bbadc3ec29df96654bf1dc4c3289346945b"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)",
          "suffrage2(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "cd4f62debf4ed75ceb082349744e1a923338c6eec6f2037553580417b5e724f3",
          "withoutMetadata": "254088f7e0a41aa1066894ea6be0a8e1e4d1040429d0e265e85e301a98f48543",
          "linkedWithoutMetadata": "254088f7e0a41aa1066894ea6be0a8e1e4d1040429d0e265e85e301a98f48543"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)",
          "suffrage2(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "c6cca4192bd181ba80a52e00aab48fce9657094ff40843485647f3338f13ef85",
          "withoutMetadata": "8868ba9cb19def4a7eaea4738cd3ff84a07cc519a3fc6c5ffdbcaaf2b128e21b",
          "linkedWithoutMetadata": "8868ba9cb19def4a7eaea4738cd3ff84a07cc519a3fc6c5ffdbcaaf2b128e21b"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "ff4b51055bc8475fa196a3f250189c762f991dd453e6eea6ff77c3a6138e0a69",
          "withoutMetadata": "cdbe4b904d27d236456e1183c1a62dcc0cb3f4a9c34e0ceca8d25b178dffa159",
          "linkedWithoutMetadata": "cdbe4b904d27d236456e1183c1a62dcc0cb3f4a9c34e0ceca8d25b178dffa159"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "641dbc870820dda9a5c3ed9ead7e4e12f06197f8f5fd47897011122a61dfe2f3",
          "withoutMetadata": "9a295f89d1dd6aa5c2685c813db22c74562259828373754b1ec5af9a356b7ce6",
          "linkedWithoutMetadata": "9a295f89d1dd6aa5c2685c813db22c74562259828373754b1ec5af9a356b7ce6"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "126b055f5aafd1c102a4b015635b1b1cc15cc3b59641ca790fa00093e2bc42b6",
          "withoutMetadata": "4b34dd027caa14e2dd735762c501e6f088124d14e1a26d059793628aa102e091",
          "linkedWithoutMetadata": "4b34dd027caa14e2dd735762c501e6f088124d14e1a26d059793628aa102e091"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "85b9135762a809680ea385a1431d0c3bebf6dfe154cc2f54179b415dd07e0521",
          "withoutMetadata": "0dcbc12d21eacf1c9082484d7f32971ea2880aff9c4c67795f6a012e07b179c5",
          "linkedWithoutMetadata": "0dcbc12d21eacf1c9082484d7f32971ea2880aff9c4c67795f6a012e07b179c5"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:54"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:55"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)431_storage)",
              "src": "contracts/tranches/LodaILT.sol:64"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)431_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)431_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:41",
        "version": {
          "withMetadata": "8bb18f7baa9e406a3ee434cabc83b14d69f6333bbb7f38d21ab5c54657580b68",
          "withoutMetadata": "b312df5eae2154a73d7411d54243e6461cc8a47e1ebe406e04a40af75608bf21",
          "linkedWithoutMetadata": "b312df5eae2154a73d7411d54243e6461cc8a47e1ebe406e04a40af75608bf21"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)",
          "suffrage(address)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "voteFactor",
            "src": "contracts/tranches/LodaILT.sol:47"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:45"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:46"
            },
            {
              "contract": "LodaILT",
              "label": "voteFactor",
              "type": "t_uint8",
              "src": "contracts/tranches/LodaILT.sol:47"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:52"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:53"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)428_storage)",
              "src": "contracts/tranches/LodaILT.sol:62"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_uint8": {
              "label": "uint8"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)428_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)428_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "6e35bc5792443e015db1f811db90c6d89124a4c9d059f793e87cf3ecc7ba7ce7",
          "withoutMetadata": "9a98844a80534c8b4377f3d1f4b6141c63756e1f3a76c61132630d15c5d6a374",
          "linkedWithoutMetadata": "9a98844a80534c8b4377f3d1f4b6141c63756e1f3a76c61132630d15c5d6a374"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256,uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)425_storage)",
              "src": "contracts/tranches/LodaILT.sol:49"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)425_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)425_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                },
                {
                  "label": "tenure",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "a7d511fa24f115250d3f76ec15875ec35876ef4e4bc0a346cd7912f8c3b47d2d",
          "withoutMetadata": "259db74f364b433850d22dd1f6bf8d362fe050a22a7e2216c7b0d33d3a4cf452",
          "linkedWithoutMetadata": "259db74f364b433850d22dd1f6bf8d362fe050a22a7e2216c7b0d33d3a4cf452"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)423_storage)",
              "src": "contracts/tranches/LodaILT.sol:48"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)423_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)423_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                },
                {
                  "label": "time",
                  "type": "t_uint256"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "431b1d197b565418a0ffa3b90d35804c1d35d6798f90d33dcc246db82411de62",
          "withoutMetadata": "a92879ca8570dbfe212c8d6869127898d4ac0941a1f2cfcc6e55a356c727bd7d",
          "linkedWithoutMetadata": "a92879ca8570dbfe212c8d6869127898d4ac0941a1f2cfcc6e55a356c727bd7d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "797351e5172c2948d7e905d68dd62c1581f33fdfd97f9ca891a42add18b2002c",
          "withoutMetadata": "4f1e0f2fd7b51003a6607f2075c70fa7a20b7950cf4b7270137fdfe1eb7056f7",
          "linkedWithoutMetadata": "4f1e0f2fd7b51003a6607f2075c70fa7a20b7950cf4b7270137fdfe1eb7056f7"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "58daf424fb57ed9a7087c47660038b253db6ae23bb909e98ef995f4b8814490d",
          "withoutMetadata": "fc0613cc83fd29e75ad5b8def0d45e085ec8a45a705b8ebd1c66dc97b95c1dc4",
          "linkedWithoutMetadata": "fc0613cc83fd29e75ad5b8def0d45e085ec8a45a705b8ebd1c66dc97b95c1dc4"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Itranche": {
        "src": "contracts/base/ITranche.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [
          "withdraw(uint256)",
          "withdrawTo(address,uint256)",
          "rewards()",
          "locked()",
          "penalties()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "f07ee0f8d79d76ee0abae2eb1a205b98a1b8a01e30afedeb23e7a650f0ff615a",
          "withoutMetadata": "704e335648fd77cc7a9a6d223c743100904fc1d6b4beb326781fb3c2477fea60",
          "linkedWithoutMetadata": "704e335648fd77cc7a9a6d223c743100904fc1d6b4beb326781fb3c2477fea60"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)451_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)451_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)451_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "5330fb1f147425c338f37eb695d432092be8230b9418f5471b7744db5e1fdef9",
          "withoutMetadata": "704e335648fd77cc7a9a6d223c743100904fc1d6b4beb326781fb3c2477fea60",
          "linkedWithoutMetadata": "704e335648fd77cc7a9a6d223c743100904fc1d6b4beb326781fb3c2477fea60"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "99268ae77db5b65f538dceedbebc05afe62e26fc4db58811f7b1a7bf6b444b10",
          "withoutMetadata": "d6231ef4bab0b7333d93fc712ab11e011e648d41fe14160dd4ac0de8d6dfcaab",
          "linkedWithoutMetadata": "d6231ef4bab0b7333d93fc712ab11e011e648d41fe14160dd4ac0de8d6dfcaab"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "427e2eaefce6ea4c23830b54212e57546c7a9326cab5bcdc087cdff65b2d5232",
          "withoutMetadata": "f293ee12b2c9525835e04d334f5dbcc740bf650e26a2df61d086d190ee71314d",
          "linkedWithoutMetadata": "f293ee12b2c9525835e04d334f5dbcc740bf650e26a2df61d086d190ee71314d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "5abc6222d8a111868bbe709bce3face83552e0d03baa161dc21476aafc9c18a5",
          "withoutMetadata": "cd929c83fd486e257f14912c6a12a571b35a226481be90676a95633670575c70",
          "linkedWithoutMetadata": "cd929c83fd486e257f14912c6a12a571b35a226481be90676a95633670575c70"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "11eb04cbc01057dd0a01cdc55ba4062193f2a45598e16c57a1f90af2a095de1c",
          "withoutMetadata": "51f1e28bbf80d4c44dbbcd58f18dd89f222ad8d16d4ba9a314f3dbc4523ffbdd",
          "linkedWithoutMetadata": "51f1e28bbf80d4c44dbbcd58f18dd89f222ad8d16d4ba9a314f3dbc4523ffbdd"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "5abc6222d8a111868bbe709bce3face83552e0d03baa161dc21476aafc9c18a5",
          "withoutMetadata": "cd929c83fd486e257f14912c6a12a571b35a226481be90676a95633670575c70",
          "linkedWithoutMetadata": "cd929c83fd486e257f14912c6a12a571b35a226481be90676a95633670575c70"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "33b43eaf740ab51bef4b094d298a97ced8b9a4c4517721ed6fcfdcf340474cd4",
          "withoutMetadata": "f293ee12b2c9525835e04d334f5dbcc740bf650e26a2df61d086d190ee71314d",
          "linkedWithoutMetadata": "f293ee12b2c9525835e04d334f5dbcc740bf650e26a2df61d086d190ee71314d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "99268ae77db5b65f538dceedbebc05afe62e26fc4db58811f7b1a7bf6b444b10",
          "withoutMetadata": "d6231ef4bab0b7333d93fc712ab11e011e648d41fe14160dd4ac0de8d6dfcaab",
          "linkedWithoutMetadata": "d6231ef4bab0b7333d93fc712ab11e011e648d41fe14160dd4ac0de8d6dfcaab"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "427e2eaefce6ea4c23830b54212e57546c7a9326cab5bcdc087cdff65b2d5232",
          "withoutMetadata": "f293ee12b2c9525835e04d334f5dbcc740bf650e26a2df61d086d190ee71314d",
          "linkedWithoutMetadata": "f293ee12b2c9525835e04d334f5dbcc740bf650e26a2df61d086d190ee71314d"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "9c9c5fa8b807a32b19b42d9ebaa27530aaece75ef99aa55b88371dc68bc256ac",
          "withoutMetadata": "a3fff4c144027ce30638230c4ecf2807502c632d01be69455b2825c0776cc782",
          "linkedWithoutMetadata": "a3fff4c144027ce30638230c4ecf2807502c632d01be69455b2825c0776cc782"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "17cbb9435b3b053cdb81e14ddbadb7dac1980a708df543473d0309beec08f5ca",
          "withoutMetadata": "7a396158d98d860b3a302132c73c4563673bb544577024bf36b46964f7f64cd2",
          "linkedWithoutMetadata": "7a396158d98d860b3a302132c73c4563673bb544577024bf36b46964f7f64cd2"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "9dd8af00d7cced3869b9e2f11bd25445dd9592748bc84b785dc3aa80df19cac6",
          "withoutMetadata": "61014b6bf3ba7c91e2983b267354f00a1dda8113218c80a1c94d962b2d002b51",
          "linkedWithoutMetadata": "61014b6bf3ba7c91e2983b267354f00a1dda8113218c80a1c94d962b2d002b51"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "996197d4c09e3ed747803359ec9a2b826b0041ec7fc2c3bbb48c80d6196ce99c",
          "withoutMetadata": "9886ddec30d3b1ca75010ede27d25dc9ccef47978b22662efcab1161365de276",
          "linkedWithoutMetadata": "9886ddec30d3b1ca75010ede27d25dc9ccef47978b22662efcab1161365de276"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "4eb063d649abf946536b84bf83fea1a797fc8fea6ce115faaa1867df4ec0a963",
          "withoutMetadata": "5f2aff1171817ccdbede691e05dd15ec5cb87ae1d9dc284528dc29373b6ad0a0",
          "linkedWithoutMetadata": "5f2aff1171817ccdbede691e05dd15ec5cb87ae1d9dc284528dc29373b6ad0a0"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "c668990907cacf04056028665f28edb81a97ba1f7882095dd79294e17ca05d85",
          "withoutMetadata": "90ae8743addc3c39f893b955637692f5eabfa6dd1f79e354558f7aed1e4bbea1",
          "linkedWithoutMetadata": "90ae8743addc3c39f893b955637692f5eabfa6dd1f79e354558f7aed1e4bbea1"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "996197d4c09e3ed747803359ec9a2b826b0041ec7fc2c3bbb48c80d6196ce99c",
          "withoutMetadata": "9886ddec30d3b1ca75010ede27d25dc9ccef47978b22662efcab1161365de276",
          "linkedWithoutMetadata": "9886ddec30d3b1ca75010ede27d25dc9ccef47978b22662efcab1161365de276"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:22",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:30",
        "version": {
          "withMetadata": "c14e97c4bd4f4e971c77295aa6efacab078c7f642ca91194375df6f98b1fcb3f",
          "withoutMetadata": "5f2aff1171817ccdbede691e05dd15ec5cb87ae1d9dc284528dc29373b6ad0a0",
          "linkedWithoutMetadata": "5f2aff1171817ccdbede691e05dd15ec5cb87ae1d9dc284528dc29373b6ad0a0"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "console"
        ],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:33"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:39"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:40"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)421_storage)",
              "src": "contracts/tranches/LodaILT.sol:47"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)421_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)421_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "console": {
        "src": "hardhat/console.sol:4",
        "version": {
          "withMetadata": "6f405f5f52fc5fa4f96d6c5a0d9bcb722d99104abc0eb2388d158d16f208bce7",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:28",
        "version": {
          "withMetadata": "c9f0802e6583ac6bef7441d9d47e426d223f951d89895bd8ddcb11a11ee6033c",
          "withoutMetadata": "7ade559484c6b2d990bce569ee604d6ab8ca6d52ff63991eb49239fa6ba0b57e",
          "linkedWithoutMetadata": "7ade559484c6b2d990bce569ee604d6ab8ca6d52ff63991eb49239fa6ba0b57e"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:31"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:32"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:37"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:38"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)420_storage)",
              "src": "contracts/tranches/LodaILT.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)420_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)420_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:28",
        "version": {
          "withMetadata": "54934c1de926eb8d7e405e372331e0cffa14b8af7d38c575c6ab065bd734f510",
          "withoutMetadata": "213c3a078da82db45b8843ea3cdf582b639a161800dcad4a18bc97d6d7ffdb7e",
          "linkedWithoutMetadata": "213c3a078da82db45b8843ea3cdf582b639a161800dcad4a18bc97d6d7ffdb7e"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:31"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:32"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:37"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:38"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)420_storage)",
              "src": "contracts/tranches/LodaILT.sol:45"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)420_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)420_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:28",
        "version": {
          "withMetadata": "c918fdba6544003bc9544c5e9357a776240fe5bdaf513107b0fc4361fec11d2a",
          "withoutMetadata": "213c3a078da82db45b8843ea3cdf582b639a161800dcad4a18bc97d6d7ffdb7e",
          "linkedWithoutMetadata": "213c3a078da82db45b8843ea3cdf582b639a161800dcad4a18bc97d6d7ffdb7e"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "constructor",
            "contract": "LodaILT",
            "src": "contracts/tranches/LodaILT.sol:30"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:31"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:32"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:42"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:43"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)419_storage)",
              "src": "contracts/tranches/LodaILT.sol:50"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)419_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)419_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:28",
        "version": {
          "withMetadata": "739d845662ae42b873e82ab57c590f041f2c6664b03cc34f4f76f88f764bdb74",
          "withoutMetadata": "63829d07b71537996395132156625fac9ae39dd78af6bec96da31c76e2720d52",
          "linkedWithoutMetadata": "63829d07b71537996395132156625fac9ae39dd78af6bec96da31c76e2720d52"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "stake(uint256)",
          "updateLodaToken(address)",
          "updateLodeStarToken(address)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lodaToken",
            "src": "contracts/tranches/LodaILT.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lodeStarToken",
            "src": "contracts/tranches/LodaILT.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:30"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:31"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:35"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)410_storage)",
              "src": "contracts/tranches/LodaILT.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)410_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)410_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    },
    {
      "OwnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:20",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "owner()",
          "renounceOwnership()",
          "transferOwnership(address)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "OwnableUpgradeable",
              "label": "_owner",
              "type": "t_address",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:21"
            },
            {
              "contract": "OwnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol:77"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "Initializable": {
        "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:17",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "Initializable",
              "label": "_initialized",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:21"
            },
            {
              "contract": "Initializable",
              "label": "_initializing",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol:26"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "PausableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:17",
        "inherit": [
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "paused()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "PausableUpgradeable",
              "label": "_paused",
              "type": "t_bool",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:28"
            },
            {
              "contract": "PausableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/security/PausableUpgradeable.sol:96"
            }
          ],
          "types": {
            "t_bool": {
              "label": "bool"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:35",
        "version": {
          "withMetadata": "acd48054d7165ba2439192724596ae7b4367867535f6c0805e7c4f4a9caca6b3",
          "withoutMetadata": "098456f632693676012ef2b98d5d5bab01f2002ab120eca75ed5738484b6b9ca",
          "linkedWithoutMetadata": "098456f632693676012ef2b98d5d5bab01f2002ab120eca75ed5738484b6b9ca"
        },
        "inherit": [
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()",
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)",
          "increaseAllowance(address,uint256)",
          "decreaseAllowance(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20Upgradeable",
              "label": "_balances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:36"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_allowances",
              "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:38"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_totalSupply",
              "type": "t_uint256",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:40"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_name",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:42"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "_symbol",
              "type": "t_string_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:43"
            },
            {
              "contract": "ERC20Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)45_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol:361"
            }
          ],
          "types": {
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_address": {
              "label": "address"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
              "label": "mapping(address => mapping(address => uint256))"
            },
            "t_string_storage": {
              "label": "string"
            },
            "t_array(t_uint256)45_storage": {
              "label": "uint256[45]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol:8",
        "inherit": [],
        "libraries": [],
        "methods": [
          "totalSupply()",
          "balanceOf(address)",
          "transfer(address,uint256)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20BurnableUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:14",
        "inherit": [
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "burn(uint256)",
          "burnFrom(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20BurnableUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20BurnableUpgradeable.sol:50"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "ERC20VotesUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:28",
        "inherit": [
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "SafeCastUpgradeable",
          "MathUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "checkpoints(address,uint32)",
          "numCheckpoints(address)",
          "delegates(address)",
          "getVotes(address)",
          "getPastVotes(address,uint256)",
          "getPastTotalSupply(uint256)",
          "delegate(address)",
          "delegateBySig(address,uint256,uint256,uint8,bytes32,bytes32)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_delegates",
              "type": "t_mapping(t_address,t_address)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:39"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_checkpoints",
              "type": "t_mapping(t_address,t_array(t_struct(Checkpoint)1044_storage)dyn_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:40"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "_totalSupplyCheckpoints",
              "type": "t_array(t_struct(Checkpoint)1044_storage)dyn_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:41"
            },
            {
              "contract": "ERC20VotesUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)47_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol:262"
            }
          ],
          "types": {
            "t_mapping(t_address,t_address)": {
              "label": "mapping(address => address)"
            },
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_array(t_struct(Checkpoint)1044_storage)dyn_storage)": {
              "label": "mapping(address => struct ERC20VotesUpgradeable.Checkpoint[])"
            },
            "t_array(t_struct(Checkpoint)1044_storage)dyn_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint[]"
            },
            "t_struct(Checkpoint)1044_storage": {
              "label": "struct ERC20VotesUpgradeable.Checkpoint",
              "members": [
                {
                  "label": "fromBlock",
                  "type": "t_uint32"
                },
                {
                  "label": "votes",
                  "type": "t_uint224"
                }
              ]
            },
            "t_uint32": {
              "label": "uint32"
            },
            "t_uint224": {
              "label": "uint224"
            },
            "t_array(t_uint256)47_storage": {
              "label": "uint256[47]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20MetadataUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/IERC20MetadataUpgradeable.sol:12",
        "inherit": [
          "IERC20Upgradeable"
        ],
        "libraries": [],
        "methods": [
          "name()",
          "symbol()",
          "decimals()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:22",
        "inherit": [
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [
          "CountersUpgradeable",
          "ECDSAUpgradeable"
        ],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_nonces",
              "type": "t_mapping(t_address,t_struct(Counter)1988_storage)",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:25"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "_PERMIT_TYPEHASH",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:28"
            },
            {
              "contract": "ERC20PermitUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)49_storage",
              "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-ERC20PermitUpgradeable.sol:93"
            }
          ],
          "types": {
            "t_mapping(t_address,t_struct(Counter)1988_storage)": {
              "label": "mapping(address => struct CountersUpgradeable.Counter)"
            },
            "t_address": {
              "label": "address"
            },
            "t_struct(Counter)1988_storage": {
              "label": "struct CountersUpgradeable.Counter",
              "members": [
                {
                  "label": "_value",
                  "type": "t_uint256"
                }
              ]
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)49_storage": {
              "label": "uint256[49]"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "IERC20PermitUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/token/ERC20/extensions/draft-IERC20PermitUpgradeable.sol:13",
        "inherit": [],
        "libraries": [],
        "methods": [
          "permit(address,address,uint256,uint256,uint8,bytes32,bytes32)",
          "nonces(address)",
          "DOMAIN_SEPARATOR()"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ContextUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:16",
        "inherit": [
          "Initializable"
        ],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "ContextUpgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol:30"
            }
          ],
          "types": {
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "CountersUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol:13",
        "version": {
          "withMetadata": "fc5fc0d1199195d99908678f20a85f8f8f7a93a0d362a1332e1a2bb271df606c",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "ECDSAUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/ECDSAUpgradeable.sol:11",
        "version": {
          "withMetadata": "288c381090a77ca097e87a92b77bb2e4e28b8bb9a51085eb885d35ea1879d8e5",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "EIP712Upgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:27",
        "inherit": [
          "Initializable"
        ],
        "libraries": [
          "ECDSAUpgradeable"
        ],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_NAME",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:29"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "_HASHED_VERSION",
              "type": "t_bytes32",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:30"
            },
            {
              "contract": "EIP712Upgradeable",
              "label": "__gap",
              "type": "t_array(t_uint256)50_storage",
              "src": "@openzeppelin/contracts-upgradeable/utils/cryptography/draft-EIP712Upgradeable.sol:111"
            }
          ],
          "types": {
            "t_bytes32": {
              "label": "bytes32"
            },
            "t_array(t_uint256)50_storage": {
              "label": "uint256[50]"
            },
            "t_uint256": {
              "label": "uint256"
            }
          },
          "layoutVersion": "1.1"
        }
      },
      "MathUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/MathUpgradeable.sol:8",
        "version": {
          "withMetadata": "c0047129606b0ed4dfa08ad2cd6452479678b98e4f16c94aad3cc22a5e54fc02",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "SafeCastUpgradeable": {
        "src": "@openzeppelin/contracts-upgradeable/utils/math/SafeCastUpgradeable.sol:20",
        "version": {
          "withMetadata": "b85ac48eb654324fbee132acf74e64adaad53f72c4f5bfd5622fe4f36625d171",
          "withoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff",
          "linkedWithoutMetadata": "08d24783a787f8a51dea0c166bb6f91a4f0865e02d03d749f102d332e6ead0ff"
        },
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "Itranche": {
        "src": "contracts/base/ITranche.sol:4",
        "inherit": [],
        "libraries": [],
        "methods": [],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaToken": {
        "src": "contracts/tokens/LodaToken.sol:12",
        "version": {
          "withMetadata": "f88289fef37812d2cb3ce0f4a94af12a881a69bd083e8716371a1878e2ef58ee",
          "withoutMetadata": "5bba1db13a595c62d54bab0c8694c458661498a74f48a7d6b743ddb29f67d056",
          "linkedWithoutMetadata": "5bba1db13a595c62d54bab0c8694c458661498a74f48a7d6b743ddb29f67d056"
        },
        "inherit": [
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ERC20BurnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "pause()",
          "unpause()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodeStar": {
        "src": "contracts/tokens/LodeStar.sol:12",
        "version": {
          "withMetadata": "1a44a2b75924f542768cdc6f32f5a42716ea56ae25d023429204d1820d1908da",
          "withoutMetadata": "7d184a2027f1c38a6f49429188606221fe8eeb20ab1ee28159803b23864b57a4",
          "linkedWithoutMetadata": "7d184a2027f1c38a6f49429188606221fe8eeb20ab1ee28159803b23864b57a4"
        },
        "inherit": [
          "ERC20VotesUpgradeable",
          "ERC20PermitUpgradeable",
          "EIP712Upgradeable",
          "IERC20PermitUpgradeable",
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ERC20BurnableUpgradeable",
          "ERC20Upgradeable",
          "IERC20MetadataUpgradeable",
          "IERC20Upgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "()",
          "initialize()",
          "pause()",
          "unpause()",
          "mint(address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "AToken": {
        "src": "contracts/tranches/LodaILT.sol:20",
        "inherit": [],
        "libraries": [],
        "methods": [
          "balanceOf(address)",
          "allowance(address,address)",
          "approve(address,uint256)",
          "transfer(address,uint256)",
          "transferFrom(address,address,uint256)"
        ],
        "linkReferences": [],
        "errors": [],
        "layout": {
          "storage": [],
          "types": {},
          "layoutVersion": "1.1"
        }
      },
      "LodaILT": {
        "src": "contracts/tranches/LodaILT.sol:28",
        "version": {
          "withMetadata": "cbd399026fa53ded789c6fcb19b380e5c6265b07ae91b5cc39d2842536fc7e75",
          "withoutMetadata": "e62a00ef1d861ff7283ad24cfecc3d6b65b69ef86e285681a1ecece28569e592",
          "linkedWithoutMetadata": "e62a00ef1d861ff7283ad24cfecc3d6b65b69ef86e285681a1ecece28569e592"
        },
        "inherit": [
          "OwnableUpgradeable",
          "PausableUpgradeable",
          "ContextUpgradeable",
          "Initializable"
        ],
        "libraries": [],
        "methods": [
          "stake(uint256)",
          "take(uint256)"
        ],
        "linkReferences": [],
        "errors": [
          {
            "kind": "state-variable-assignment",
            "name": "lodaToken",
            "src": "contracts/tranches/LodaILT.sol:30"
          },
          {
            "kind": "state-variable-assignment",
            "name": "lodeStarToken",
            "src": "contracts/tranches/LodaILT.sol:31"
          }
        ],
        "layout": {
          "storage": [
            {
              "contract": "LodaILT",
              "label": "lodaToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:30"
            },
            {
              "contract": "LodaILT",
              "label": "lodeStarToken",
              "type": "t_address",
              "src": "contracts/tranches/LodaILT.sol:31"
            },
            {
              "contract": "LodaILT",
              "label": "stakedBalances",
              "type": "t_mapping(t_address,t_uint256)",
              "src": "contracts/tranches/LodaILT.sol:34"
            },
            {
              "contract": "LodaILT",
              "label": "totalStaked",
              "type": "t_uint256",
              "src": "contracts/tranches/LodaILT.sol:35"
            },
            {
              "contract": "LodaILT",
              "label": "stakes",
              "type": "t_mapping(t_address,t_struct(Stake)3471_storage)",
              "src": "contracts/tranches/LodaILT.sol:42"
            }
          ],
          "types": {
            "t_address": {
              "label": "address"
            },
            "t_mapping(t_address,t_uint256)": {
              "label": "mapping(address => uint256)"
            },
            "t_uint256": {
              "label": "uint256"
            },
            "t_mapping(t_address,t_struct(Stake)3471_storage)": {
              "label": "mapping(address => struct LodaILT.Stake)"
            },
            "t_struct(Stake)3471_storage": {
              "label": "struct LodaILT.Stake",
              "members": [
                {
                  "label": "amount",
                  "type": "t_uint256"
                },
                {
                  "label": "staker",
                  "type": "t_address"
                }
              ]
            }
          },
          "layoutVersion": "1.1"
        }
      }
    }
  ]
}